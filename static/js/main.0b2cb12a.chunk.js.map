{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["rtc","AgoraRTC","createClient","mode","codec","client","localAudioTrack","localVideoTrack","options","input","a","join","createMicrophoneAudioTrack","createCameraVideoTrack","publish","play","on","user","mediaType","subscribe","console","log","videoTrack","PlayerContainer","React","createElement","id","uid","className","ReactDOM","render","document","getElementById","remoteVideoTrack","audioTrack","remove","leaveCall","close","remoteUsers","forEach","playerContainer","leave","App","useState","setInput","btn","setBtn","flag","setFlag","Button","variant","type","value","onClick","Form","onSubmit","startBasicCall","Group","controlId","Label","Control","onChange","e","target","placeholder","Text","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0b2cb12a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.css\";\nimport AgoraRTC from \"agora-rtc-sdk-ng\";\nimport { Form, Button } from \"react-bootstrap\";\n\nconst client = AgoraRTC.createClient({ mode: \"live\", codec: \"vp8\" });\n\nconst rtc = {\n  // For the local client\n  client: null,\n  // For the local audio and video tracks\n  localAudioTrack: null,\n  localVideoTrack: null,\n};\n\nconst options = {\n  // Pass your app ID here\n  appId: \"3c959e7eb4864d75b2539f38e289f6e6\",\n  // Set the channel name\n  channel: \"demo_channel_name\",\n  // Pass a token if your project enables the App Certificate\n  token: null,\n};\n\nasync function startBasicCall(input) {\n  rtc.client = AgoraRTC.createClient({ mode: \"rtc\", codec: \"h264\" });\n  const uid = await rtc.client.join(options.appId, input, options.token, null);\n  // Create an audio track from the audio captured by a microphone\n  rtc.localAudioTrack = await AgoraRTC.createMicrophoneAudioTrack();\n  // Create a video track from the video captured by a camera\n  rtc.localVideoTrack = await AgoraRTC.createCameraVideoTrack();\n  // Publish the local audio and video tracks to the channel\n  await rtc.client.publish([rtc.localAudioTrack, rtc.localVideoTrack]);\n\n  rtc.localVideoTrack.play(\"local-stream\");\n\n  rtc.client.on(\"user-published\", async (user, mediaType) => {\n    // Subscribe to a remote user\n    await rtc.client.subscribe(user);\n    console.log(\"subscribe success\");\n\n    if (mediaType === \"video\" || mediaType === \"all\") {\n      // Get `RemoteVideoTrack` in the `user` object.\n      const remoteVideoTrack = user.videoTrack;\n      const PlayerContainer = React.createElement(\"div\", {\n        id: user.uid,\n        className: \"stream\",\n      });\n      ReactDOM.render(\n        PlayerContainer,\n        document.getElementById(\"remote-stream\")\n      );\n      // Dynamically create a container in the form of a DIV element for playing the remote video track.\n      // Specify the ID of the DIV container. You can use the `uid` of the remote user.\n      // playerContainer.id = user.uid;\n      // playerContainer.style.width = \"640px\";\n      // playerContainer.style.height = \"480px\";\n      // document.body.append(playerContainer);\n\n      // Play the remote audio and video tracks\n      // Pass the ID of the DIV container and the SDK dynamically creates a player in the container for playing the remote video track\n\n      user.remoteVideoTrack.play(`${user.uid}`);\n    }\n\n    if (mediaType === \"audio\" || mediaType === \"all\") {\n      // Get `RemoteAudioTrack` in the `user` object.\n      const remoteAudioTrack = user.audioTrack;\n      // Play the audio track. Do not need to pass any DOM element\n      remoteAudioTrack.play();\n    }\n\n    rtc.client.on(\"user-unpublished\", (user) => {\n      // Get the dynamically created DIV container\n      const playerContainer = document.getElementById(user.uid);\n      // Destroy the container\n      playerContainer.remove();\n    });\n  });\n\n  console.log(\"publish success!\");\n}\n\nasync function leaveCall() {\n  // Destroy the local audio and video tracks\n  rtc.localAudioTrack.close();\n  rtc.localVideoTrack.close();\n\n  // Traverse all remote users\n  rtc.client.remoteUsers.forEach((user) => {\n    // Destroy the dynamically created DIV container\n    const playerContainer = document.getElementById(user.uid);\n    playerContainer && playerContainer.remove();\n  });\n\n  // Leave the channel\n  await rtc.client.leave();\n}\n\nfunction App() {\n  const onSubmit = () => {\n    if (flag === false) {\n      startBasicCall(input);\n      setBtn(\"LEAVE\");\n      setFlag(true);\n      console.log(flag);\n    } else {\n      leaveCall();\n      setFlag(false);\n    }\n  };\n\n  const [input, setInput] = useState(\"\");\n  const [btn, setBtn] = useState(\"SUBMIT\");\n  const [flag, setFlag] = useState(false);\n  if (flag) {\n    return (\n      <div className=\"container\">\n        <Button variant=\"primary\" type=\"submit\">\n          {btn}\n        </Button>\n        <div id=\" stream local-stream\" className=\"stream local-stream\"></div>\n        <div id=\"stream remote-stream\" className=\"stream remote-stream\" />\n        <input type=\"submit\" value={btn} onClick={leaveCall} />\n      </div>\n    );\n  }\n  return (\n    <div className=\"container\">\n      <h1>Agora WebSDK NG Beta Testing</h1>\n      <Form onSubmit={onSubmit}>\n        <Form.Group controlId=\"formBasicEmail\">\n          <Form.Label>Channel Name</Form.Label>\n          <Form.Control\n            type=\"text\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder=\"Channel Name\"\n          />\n          <Form.Text className=\"text-muted\">\n            AppID : \"{options.appId}\"\n          </Form.Text>\n        </Form.Group>\n        <Button variant=\"primary\" type=\"submit\">\n          {btn}\n        </Button>\n      </Form>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}